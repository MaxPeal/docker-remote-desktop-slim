name: build

on:
  workflow_dispatch:
  push:
    branches:
      - master
  schedule:
    - cron: '0 2 * * SUN'

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Generate temporary tag name
        shell: bash
        run: |
          test_tag=$(date +%Y%m%d%H%M%S)
          echo "[debug] Generated test tag name is '${test_tag}'"
          echo "::set-output name=test_tag::$test_tag"
        id: generate_temporary_tag_name
      - name: Env Fix LowerCase GITHUB_REPOSITORY repo_name_lc
        shell: bash
        run: |
          repo_name_lc=$(echo "${GITHUB_REPOSITORY}" | tr '[A-Z]' '[a-z]')
          echo "[debug] Generated repo name lc is '${repo_name_lc}'"
          echo "::set-output name=repo_name_lc::$repo_name_lc"
          project_name_lc=$(echo "${GITHUB_REPOSITORY}" | tr '[A-Z]' '[a-z]' | sed -e 's/^.*\///')
          echo "[debug] Generated project_name_lc is '${project_name_lc}'"
          echo "::set-output name=project_name_lc::$project_name_lc"
          owner_name_lc=$(echo "${GITHUB_REPOSITORY}" | tr '[A-Z]' '[a-z]' | sed -e 's/\/.*$//')
          echo "[debug] Generated owner_name_lc is '${owner_name_lc}'"
          echo "::set-output name=owner_name_lc::$owner_name_lc"
          app_name=$(echo "${GITHUB_REPOSITORY}" | grep -P -o -m 1 '(?<=/docker-).*')
          echo "[debug] Generated app name is '${app_name}'"
          echo "::set-output name=app_name::$app_name"
        id: env_fix
      - name: Env ubuntu_codename ubuntu_version
        shell: bash
        run: |
          ubuntu_codename=$(echo "focal")
          echo "[debug] Generated ubuntu_codename is '${ubuntu_codename}'"
          echo "::set-output name=ubuntu_codename::$ubuntu_codename"
          ubuntu_version=$(echo "20.04")
          echo "[debug] Generated ubuntu_version is '${ubuntu_version}'"
          echo "::set-output name=ubuntu_version::$ubuntu_version"
        id: env_ubuntu
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ steps.env_fix.outputs.owner_name_lc }}/${{ steps.env_fix.outputs.app_name }},
            ghcr.io/${{ steps.env_fix.outputs.repo_name_lc }},
            registry.gitlab.com/${{ steps.env_fix.outputs.repo_name_lc }}
          tags: |
            latest
            ubuntu-${{ steps.env_ubuntu.outputs.ubuntu_codename }}
            ubuntu-${{ steps.env_ubuntu.outputs.ubuntu_version }}
            ${{ steps.generate_temporary_tag_name.outputs.test_tag }}
            ${{ github.event.inputs.tags }}
          #  ${{ steps.env_fix.outputs.owner_name_lc }}/${{ steps.env_fix.outputs.app_name }}:latest
          #  ${{ steps.env_fix.outputs.owner_name_lc }}/${{ steps.env_fix.outputs.app_name }}:ubuntu-${{ steps.env_ubuntu.outputs.ubuntu_codename }}
          #  ${{ steps.env_fix.outputs.owner_name_lc }}/${{ steps.env_fix.outputs.app_name }}:ubuntu-${{ steps.env_ubuntu.outputs.ubuntu_version }}
          #  ghcr.io/${{ steps.env_fix.outputs.repo_name_lc }}:${{ steps.generate_temporary_tag_name.outputs.test_tag }}
          #  ghcr.io/${{ steps.env_fix.outputs.repo_name_lc }}:${{ github.event.inputs.tags }}
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - 
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
          # password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push ccache
        if: github.event_name != 'pull_request'
        id: docker_build-cache
        uses: docker/build-push-action@v2
        env:
          ubuntu_codename: ${{ steps.env_ubuntu.outputs.ubuntu_codename }}
          ubuntu_version: ${{ steps.env_ubuntu.outputs.ubuntu_version }}
        with:
          target: build-cache
          build-args: |
            REPO_NAME_LC=${{ steps.env_fix.outputs.repo_name_lc }}
            OWNER_NAME_LC=${{ steps.env_fix.outputs.owner_name_lc }}
            PROJECT_NAME_LC=${{ steps.env_fix.outputs.project_name_lc }}
            APP_NAME=${{ steps.env_fix.outputs.app_name }}
            TAG=${{ steps.env_ubuntu.outputs.ubuntu_codename }}
          platforms:
            linux/amd64,
            linux/arm64
          push: false
          tags: 
            ${{ steps.env_fix.outputs.repo_name_lc }}:build-cache,
            ghcr.io/${{ steps.env_fix.outputs.repo_name_lc }}:build-cache,
            registry.gitlab.com/${{ steps.env_fix.outputs.repo_name_lc }}:build-cache
          labels: ${{ steps.meta.outputs.labels }}
      -
        name: Push ccache Docker image to Docker Hub
        if: github.event_name != 'pull_request'
        uses: nick-invision/retry@v2.6.0
        with:
          timeout_minutes: 30
          max_attempts: 1
          # max_attempts: 3
          retry_wait_seconds: 120
          command: |
            docker push ${{ steps.env_fix.outputs.repo_name_lc }}:build-cache
      - 
        name: Push ccache Docker image to GitHub Container Registry (GHCR)
        if: github.event_name != 'pull_request'
        #${{ github.event_name != 'pull_request' }}
        uses: nick-invision/retry@v2.6.0
        with:
          timeout_minutes: 30
          max_attempts: 1
          # max_attempts: 3
          retry_wait_seconds: 120
          command: |
            docker push ghcr.io/${{ steps.env_fix.outputs.repo_name_lc }}:build-cache
      -
        name: Build and prep ccache
        id: docker_build
        uses: docker/build-push-action@v2
        env:
          ubuntu_codename: ${{ steps.env_ubuntu.outputs.ubuntu_codename }}
          ubuntu_version: ${{ steps.env_ubuntu.outputs.ubuntu_version }}
        with:
          build-args: |
            TAG=${{ steps.env_ubuntu.outputs.ubuntu_codename }}
          platforms:
            linux/amd64,
            linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - 
        name: Push Docker image to GitHub Container Registry (GHCR)
        if: github.event_name != 'pull_request'
        #${{ github.event_name != 'pull_request' }}
        uses: nick-invision/retry@v2.6.0
        with:
          timeout_minutes: 30
          max_attempts: 1
          # max_attempts: 3
          retry_wait_seconds: 120
          command: |
            docker push ghcr.io/${{ steps.env_fix.outputs.repo_name_lc }}:${{ github.event.inputs.tags }}
      -
        name: Push Docker image to Docker Hub
        if: github.event_name != 'pull_request'
        uses: nick-invision/retry@v2.6.0
        with:
          timeout_minutes: 30
          max_attempts: 1
          # max_attempts: 3
          retry_wait_seconds: 120
          command: |
            docker push ${{ steps.env_fix.outputs.repo_name_lc }}:${{ github.event.inputs.tags }}
      -
        name: Update repo description
        if: github.event_name != 'pull_request'
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          # repository: ${{ steps.env_fix.outputs.repo_name_lc }}
          repository: ${{ steps.env_fix.outputs.owner_name_lc }}/${{ steps.env_fix.outputs.project_name_lc }}
